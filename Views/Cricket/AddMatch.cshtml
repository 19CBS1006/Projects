@model Vispl.Training.Crickinfo.VO.Match_VO
@using Syncfusion.EJ2.DropDowns
@{
    ViewBag.Title = "Match Scheding Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Teams = ViewData["Teams"] as List<object>;
    
}

<style>
    .container{
        border-radius:10px;
    }

    .timepass {
        border: 2px dashed #007bff; /* Add a dashed border */
        border-radius: 10px;
    }

    .login-container h2 {
        margin-bottom: 20px;
        text-align: center;
        color: #333; /* Text color for the heading */
    }

    .navbar-brand {
        font-size: 1.5em;
        font-weight: bold;
        
    }


    .nav-link {
        font-size: 1.1em;
        padding: 10px 15px;
    }


    .nav-item:hover .nav-link {
        background-color: #007bff;
        color: white;
        transition: background-color 0.3s ease;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            font-weight: bold;
            color: #555; /* Text color for labels */
        }

        .form-group button {
            width: 10%;
            padding: 12px;
            margin-right: 5%;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 25px;
            font-size: 18px; /* Reduced font size */
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease; /* Smooth transition for background color change */
        }

            .form-group button:hover {
                background-color: aliceblue; /* Darker background color on hover */
            }
</style>

<body style="background-color:ghostwhite">

    <nav id="nsvbar" class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-primary">
        <div class="container-fluid">
            <img src="~/Content/Images/l.png" height="100" />
            @Html.ActionLink("MATCH SCHEDULING FORM", "AddMatch", "Cricket", new { area = "" }, new { @class = "navbar-brand" })

            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-lg-auto">
                    <li class="nav-item">
                        @Html.ActionLink("BACK", "AdminPage", "Cricket", new { area = "" }, new { @class = "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("VIEW", "ViewMatches", "Cricket", new { area = "" }, new { @class = "nav-link" })
                    </li>

                </ul>
            </div>
        </div>
    </nav>

    <br />

    <div class="text-danger">
        @Html.ValidationSummary()
    </div>

    <div class="form-group">
        <h4 style="text-align:end">Total Count: <span style="color:black">@Convert.ToInt32(ViewData["Count"])</span></h4>
    </div>


    <div class="timepass" style=" width: 100%;  padding-top:3% ">

        <form id="cricketForm" action="@Url.Action("AddMatch", "Cricket")" method="POST" enctype="multipart/form-data">

            @*Match Venue*@
            <div class="form-group">
                <div class="col-md-2 control-label" style="display: flex; justify-content: center; margin-left  : 19.8%">
                    @Html.LabelFor(model => model.MatchVenue)
                    <span style="color: red; margin-left: 5px;">*</span>
                </div>
                <div class="col-md-10" style="text-align:center;">
                    @Html.EJS().DropDownListFor(model => model.MatchVenue).DataSource(ViewData["MatchVenue"] as List<object>).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Placeholder("Select Match Venue").Width("40%").Value("").ShowClearButton().Render()
                </div>
            </div>

            @*Match Type*@
            <div class="form-group">
                <div class="col-md-2 control-label" style="display: flex; justify-content: center; margin-left  : 19.6%">
                    @Html.LabelFor(model => model.MatchType)
                    <span style="color: red; margin-left: 5px;">*</span>
                </div>
                <div class="col-md-10" style="text-align:center;">
                    @Html.EJS().DropDownListFor(model => model.MatchType).DataSource(ViewData["MatchType"] as List<object>).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Placeholder("Select Match Type").Width("40%").Value("").ShowClearButton().Render()
                </div>
            </div>

            @*Team A*@
            <div class="form-group">
                <div class="col-md-2 control-label" style="display: flex; justify-content: center; margin-left  : 18.8%">
                    @Html.LabelFor(model => model.Team_A)
                    <span style="color: red; margin-left: 5px;">*</span>
                </div>
                <div class="col-md-10" style="text-align:center;">
                    @Html.EJS().DropDownListFor(model => model.Team_A).DataSource(Teams).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Value("").Placeholder("Select Team - 1").Width("40%").ShowClearButton().Render()
                </div>
            </div>

            @*Team B*@
            <div class="form-group">
                <div class="col-md-2 control-label" style="display: flex; justify-content: center; margin-left  : 18.8%">
                    @Html.LabelFor(model => model.Team_B)
                    <span style="color: red; margin-left: 5px;">*</span>
                </div>
                <div class="col-md-10" style="text-align:center; ">
                    @Html.EJS().DropDownListFor(model => model.Team_B).DataSource(Teams).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Value("").Placeholder("Select Team - 2").Width("40%").ShowClearButton().Render()
                </div>
            </div>

            @*Match Schedule/Timing*@
            <div class="form-group">
                <div class="col-md-2 control-label" style="display: flex; justify-content: center; margin-left  : 20.3%">
                    @Html.LabelFor(model => model.MatchSchedule)
                    <span style="color: red; margin-left: 5px;">*</span>
                </div>
                <div class="col-md-10" style="text-align:center; margin-left:2%">
                    @Html.EJS().DateTimePickerFor(model => model.MatchSchedule).Placeholder("Select the Date").Format("dd-MM-yyyy HH:mm:ss").Width("25%").ShowClearButton().Render()
                    @Html.EJS().DropDownListFor(model => model.MatchScheduleOffset).DataSource(ViewData["Zones"] as List<object>).Placeholder("Select the Time Zone").ShowClearButton().Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Value("").Placeholder("Select TimeZone").Width("20%").Render()
                </div>
            </div>

            @*Submit*@
            <div class="form-group" style=" text-align:end; margin-top:5% ">
                @Html.EJS().Button("button").Content("ADD").IsPrimary(true).HtmlAttributes(new Dictionary<string, object>
                { { "onclick", "submitForm()" }, { "type", "button" } }).Render()
            </div>
        </form>
    </div>

    <script>

        function submitForm() {
            var team1 = document.getElementById("Team_A").ej2_instances[0];
            var team2 = document.getElementById("Team_B").ej2_instances[0];
            var matchVenue = document.getElementById("MatchVenue");
            var matchType = document.getElementById("MatchType");
            var matchTime = document.getElementById("MatchSchedule").ej2_instances[0];
            var matchOffset = document.getElementById("MatchScheduleOffset");

            if (matchVenue.value === "") {
                alert("Please select the Match VENUE");
                matchVenue.focus();
            }
            else if (matchType.value === "") {
                alert("Please select the Match TYPE");
                matchType.focus();
            }
            else if (team1.value === "") {
                alert("Please select Team 1");
                team1.focus();
            }
            else if (team2.value === "") {
                alert("Please select Team 2");
                team2.focus();
            }
            else if (team1.value === team2.value) {
                alert("Please Select 2 different Teams");
                team2.focus();
            }
            else if (matchTime.value === null || matchTime.value === "") {
                alert("Please select Date & Time");
                matchTime.focus();
            }
            else if (matchOffset.value === "" || matchOffset.value === null)
            {
                alert("Please select the Time Zone");
                matchOffset.focus();
            }
            else
            {
                console.log(team1.value);
                console.log(team2.value);
                document.getElementById("cricketForm").submit();
                alert("Record Added successfully.");
            }
        }
    </script>

</body>

